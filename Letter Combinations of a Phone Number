
class Solution(object):
    def letterCombinations(self, digits):
        """
        :type digits: str
        :rtype: List[str]
        """

        
        d={'2':['a','b','c'],'3':['d','e','f'],'4':['g','h','i'],'5':['j','k','l'],'6':['m','n','o'],'7':['p','q','r','s'],'8':['t','u','v'],'9':['w','x','y','z']}
        if not digits:
            return []
        prev = d[digits[0]]
        for i in range(1,len(digits)):
            curr=[]
            k=digits[i]
            for c in d[k]:
                for j in prev:
                    curr.append(j+c)
            prev=curr
        return prev
                
class Solution(object):
    def letterCombinations(self, digits,l=""):
        """
        :type digits: str
        :rtype: List[str]
        """
        d={'2':'abc','3':'def','4':'ghi','5':'jkl','6':'mno','7':'pqrs','8':'tuv','9':'wxyz'}
        if not digits:
            return []
        if len(digits)==1:
            return [l+c for c in d[digits[0]]]
        
        res=[]
        for c in d[digits[0]]: 
            res+=self.letterCombinations(digits[1:],l+c)
        return res
        
        

