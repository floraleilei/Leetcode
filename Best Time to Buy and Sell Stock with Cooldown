The natural states for this problem is the 3 possible transactions : buy, sell, rest. Here rest means cooldown.

Then the transaction sequences can end with any of these three states.

For each of them we make an array, buy[n], sell[n] and rest[n].

buy[i] means before day i what is the maxProfit for any sequence end with buy.

sell[i] means before day i what is the maxProfit for any sequence end with sell.

rest[i] means before day i what is the maxProfit for any sequence end with rest.

Then we want to deduce the transition functions for buy sell and rest. By definition we have:

buy[i]  = max(rest[i-1]-price, buy[i-1]) 
sell[i] = max(buy[i-1]+price, sell[i-1])
rest[i] = max(sell[i-1], buy[i-1], rest[i-1])

because ï¼š buy[i] <= rest[i]<= sell[i].
-----
rest[i] = sell[i-1]
buy[i] = max(sell[i-2]-price, buy[i-1])
sell[i] = max(buy[i-1]+price, sell[i-1])

class Solution(object):
    def maxProfit(self, prices):
        """
        :type prices: List[int]
        :rtype: int
        """
        if len(prices)<2:
            return 0
        buy,sell,pre_sell,pre_buy = -prices[0],0,0,0
        for p in prices:
            pre_buy = buy
            buy = max(pre_sell-p,pre_buy)
            pre_sell = sell
            sell = max(pre_buy+p,pre_sell)
        return sell
    

